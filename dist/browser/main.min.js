var O;(function(E){E[E.ERROR=-1]="ERROR",E[E.INIT=1]="INIT",E[E.PING=2]="PING",E[E.PONG=3]="PONG",E[E.MESSAGE=4]="MESSAGE"})(O||(O={}));function M(E,r,s){let c=String(E),I,N;if(s===void 0&&typeof r!=="string")N=r,I=void 0;else if(typeof r==="string")N=s,I=r;if(I)c+=I;if(N)c+=JSON.stringify(N);return c}function R(E){return E instanceof Int8Array||E instanceof Int16Array||E instanceof Int32Array||E instanceof Uint8Array||E instanceof Uint8ClampedArray||E instanceof Uint16Array||E instanceof Uint32Array||E instanceof Float32Array||E instanceof Float64Array||E instanceof BigInt64Array}function G(E){if(typeof E==="string");else if(E instanceof ArrayBuffer||R(E))E=i.decode(E);else if(Array.isArray(E))E=Buffer.concat(E).toString();else throw new TypeError("Invalid payload type.");const r={payload_type:(E.codePointAt(0)??48)-48};let s=1,c="";for(let I=s;I<E.length&&D.has(E[I])===!1;I++)c+=E[I],s++;if(c.length>31){if(h)console.error(`Event type cannot be longer than 31 characters, received "${c}"`);return{payload_type:O.ERROR}}if(c.length>0)r.event_type=c;if(s<E.length){const I=E.slice(s);try{r.data=JSON.parse(I)}catch{if(h)console.error(`Cannot parse payload "${I}": invalid JSON`);return{payload_type:O.ERROR}}}return r}var h=!0,D=new Set(["[","{"]),i=new TextDecoder;var C;(function(E){E.SOCKET="p.socket",E.GROUP="p.group",E.BROADCAST="p.broadcast"})(C||(C={}));class x extends Event{h;constructor(E,r){super(E);this.detail=r}}class S extends EventTarget{listeners=new Set;addListener(E,r,s){this.addEventListener(E,r,s);let c=()=>{this.removeEventListener(E,r,s),this.listeners.delete(c)};return this.listeners.add(c),c}on(E,r){return this.addListener(E,r)}once(E,r){return this.addListener(E,r,{once:!0})}wait(E){return new Promise((r)=>{this.once(E,(s)=>{r(s)})})}emit(E,r){this.dispatchEvent(new x(E,r))}destroy(){for(let E of this.listeners)E();this.listeners.clear()}}function t(E){if(Object.keys(E.headers||{}).length>0)console.warn("[@extws/client] Headers are not supported while using WebSocket in browser. They will be ignored.");return new WebSocket(E.url)}function U(E){return typeof E==="object"&&E!==null&&!Array.isArray(E)&&E.constructor===Object}var A=new Set([2,3]);class L extends S{websocket=null;websocket_state=null;url;headers={};options={connect:!0,reconnect:!0,reconnect_interval:2000,ping_timeout:5000};timeouts={};constructor(E,r){super();if(this.url=E,r)this.options={...this.options,...r};if(this.options.connect===!0)setTimeout(()=>this.connect());this.on("disconnect",()=>{if(this.websocket=null,this.websocket_state=null,this.options.reconnect===!0)clearTimeout(this.timeouts.reconnect),this.timeouts.reconnect=setTimeout(()=>this.connect(),this.options.reconnect_interval)})}get is_connected(){return this.websocket!==null&&A.has(this.websocket.readyState)!==!0&&typeof this.id==="string"&&Date.now()-this.websocket_state.ts_last_message<this.websocket_state.idle_timeout}get id(){return this.websocket_state?.socket_id??null}createPing(){if(clearTimeout(this.timeouts.ping),this.websocket)this.timeouts.ping=setTimeout(()=>this.sendPing(),this.websocket_state.idle_timeout-this.options.ping_timeout)}sendPing(){if(clearTimeout(this.timeouts.dead),this.is_connected)this.websocket?.send(M(O.PING)),this.timeouts.dead=setTimeout(()=>this.disconnect(),this.options.ping_timeout*1000)}connect(){if(this.is_connected)return;if(this.websocket)this.websocket.close();this.emit("beforeconnect");const E=t({url:this.url,headers:this.headers});this.websocket=E,this.websocket_state={socket_id:null,idle_timeout:60000,ts_last_message:0},E.addEventListener("error",(r)=>{console.error(r)}),E.addEventListener("open",()=>{if(E===this.websocket)this.websocket_state.ts_last_message=Date.now(),this.createPing()}),E.addEventListener("message",(r)=>{if(E!==this.websocket)return;clearTimeout(this.timeouts.dead),this.createPing(),this.websocket_state.ts_last_message=Date.now();const{payload_type:s,data:c,event_type:I}=G(r.data);switch(s){case O.INIT:if(!U(c)||typeof c.id!=="string"||typeof c.idle_timeout!=="number")throw new TypeError("Invalid data received.");this.websocket_state.socket_id=c.id,this.websocket_state.idle_timeout=c.idle_timeout*1000,this.emit("connect");break;case O.PING:E.send(M(O.PONG));break;case O.MESSAGE:this.emit(I??"message",c);break}}),E.addEventListener("close",()=>{if(E===this.websocket)this.websocket_state.ts_last_message=0,this.emit("disconnect")})}disconnect(){clearTimeout(this.timeouts.reconnect),this.websocket?.close()}send(E,r){if(this.is_connected)this.websocket?.send(M(O.MESSAGE,E,r))}}export{L as ExtWSClient};
